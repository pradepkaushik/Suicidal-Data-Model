
# Importing the libraries
import pandas as pd
import numpy as np
import seaborn as sns

# Importing the dataset

dataset = pd.read_csv('suicide3.csv')


dataset.head()


'''bins= [0,18,50,100]
labels = ['infant','teenager','adult','senior']
dataset['AgeGroup'] = pd.cut(dataset['age'], bins=bins, labels=labels, right=False)'''



dataset['new_age']=dataset['age'].str.split('-')

dataset['new_age']=dataset['age'].str.split('-',expand=True)


# Splitting Independent features from Dependent ones

X = dataset.iloc[:, [3,5]]
y = dataset.iloc[:, 4]

# Converting the pandas objects to numpy arrays

X_array = X.values
y_array = y.values


# Importing Simple Imputer from sklearn library

from sklearn.preprocessing import Imputer

# Creating an imputer object

mean_imputer = Imputer(missing_values=0, strategy='mean')
mode_imputer = Imputer(missing_values=0, strategy='most_frequent')


# Filling the missing values using the imputer objects

dataset['new_suicide'] = mode_imputer.fit_transform(dataset.suicides_no.values.reshape(-1,1))
dataset['new_population'] = mode_imputer.fit_transform(dataset.population.values.reshape(-1,1))


# Importing the library to Label Encode and One-Hot Encode our categorical column

from sklearn.preprocessing import LabelEncoder,OneHotEncoder

labelencoder = LabelEncoder()

dataset['new_sex'] = labelencoder.fit_transform(dataset.sex)

# One-Hot encoding the Country column

onehotencoder = OneHotEncoder(categorical_features = 'all')

dummy_var = onehotencoder.fit_transform(dataset.new_sex.values.reshape(-1,1)).toarray()


# Lets create new columns for each of the gender

dataset['Male'] = dummy_var[:,0]
dataset['Female'] = dummy_var[:,1]


dataset.head()
# Rearrange all columns

new_column_seq = ['year','Male','Female','new_population','new_suicide']
dataset = dataset[new_column_seq]

dataset.head(5)

# Reassigning X and y to correspond to the new Independent & Dependent Variables

X = dataset.iloc[:,[0,3]]
y = dataset.iloc[:, -1]



# Splitting the dataset into the Training set and Test set

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)


# Feature Scaling

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)



'''# Fitting Naive Bayes to the Training set

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)'''


# Fitting kernel svm to the Training set

from sklearn.svm import SVC
classifier = SVC(kernel='rbf',random_state=0)
classifier.fit(X_train, y_train)

'''# Fitting kernel svm to the Training set
from sklearn.svm import SVC
classifier = SVC(kernel='linear',random_state=0)
classifier.fit(X_train, y_train)'''


'''# Fitting random forest to the Training set

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)'''

# Predicting the Test set results

y_pred = classifier.predict(X_test)

# Making the Confusion Matrix


from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, linewidths=0.2, cmap='Blues')

# Printing the accuracies

print("Total rows = {}".format(cm.sum()))
print("Correct Answers = {}".format(cm.diagonal().sum()))
print("Accuracy = {}%".format((cm.diagonal().sum()/cm.sum()) * 100))



# Asking questions from the model
questions = np.array([[2015,25-54], [2019,15-24]])
questions_transformed = sc.transform(questions)
answers = classifier.predict(questions_transformed)




# Finding the optimal number of neighbours
accuracies = []
for n in range(1,50,2):
    classifier = KNeighborsClassifier(n_neighbors=n)
    classifier.fit(X_train, y_train)
    y_pred = classifier.predict(X_test)
    cm = confusion_matrix(y_test, y_pred)
    accuracies.append(cm.diagonal().sum() * 100 / cm.sum())

sns.lineplot(x = range(1,50,2), y = accuracies)















